buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
		aptVersion = '0.15'
	}
	repositories {
		mavenLocal()
		mavenCentral()
        maven {url "https://plugins.gradle.org/m2/"}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("net.ltgt.gradle:gradle-apt-plugin:${aptVersion}")
		classpath("com.github.fgiannesini.libsass.gradle.plugin:libsass-gradle-plugin:+")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.ltgt.apt'
apply plugin: 'java'
apply plugin: 'com.github.fgiannesini.libsass.gradle.plugin'

group = 'com.app'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
    //database related
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('mysql:mysql-connector-java:8.0.11')

    //mapstruct
    compile('org.mapstruct:mapstruct-jdk8:1.2.0.Final')
    compile('org.mapstruct:mapstruct-processor:1.2.0.Final')
    apt 'org.mapstruct:mapstruct-processor:1.2.0.Final'

	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.2.2')
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.webjars:bootstrap:4.1.0')
    compile('org.webjars:jquery:3.1.1')
//	https://eonasdan.github.io/bootstrap-datetimepicker/ - datetimepicker documentation
    compile('org.webjars:bootstrap-datetimepicker:2.3.5')
	compile("org.springframework.boot:spring-boot-devtools")
	compile("org.javassist:javassist:3.23.1-GA")

    //testing
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

//so that generated mapstruct implementations will be considered valid beans
sourceSets {
	main {
		java {
			srcDir "${buildDir.absolutePath}/generated/source/apt/main"
		}
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs = [
			'-Amapstruct.defaultComponentModel=spring',
			'-Amapstruct.unmappedTargetPolicy=ERROR'
	]

	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
}

libSassParameters {
	inputFilePath = "static/scss/office-application.scss"
	outputFilePath = "$projectDir/src/main/resources/static/css/office-application.css"
	watchedDirectoryPath = "static/scss"
	sourceMapEmbed = true
}

//build.finalizedBy compileLibSass
//to make the css load, you need to run the compileLibSass and then run the app
build.dependsOn compileLibSass